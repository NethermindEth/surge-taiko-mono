name: "[Nethermind] Taiko Client - Docker build and push"

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - "packages/taiko-client/**"
      - ".github/workflows/taiko-client--docker-build.yml"
  push:
    branches: [main]
    tags:
      - "v*"
    paths:
      - "packages/taiko-client/**"
      - ".github/workflows/taiko-client--docker-build.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  attestations: write
  contents: read

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_REPOSITORY: nethermind/taiko-client

jobs:
  build:
    name: Build and push docker image
    runs-on: ${{ matrix.os }}
    if: github.repository == 'NethermindEth/surge-taiko-mono'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            short: amd64
          - os: ubuntu-24.04-arm
            platform: linux/arm64
            short: arm64
    outputs:
      digest-amd64: ${{ steps.digest.outputs.amd64 }}
      digest-arm64: ${{ steps.digest.outputs.arm64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/taiko-client/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          outputs: type=image,name=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }},push-by-digest=true,name-canonical=true

      - name: Set digest output
        id: digest
        run: |
          if [ "${{ matrix.short }}" = "amd64" ]; then
            echo "amd64=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT
          fi
          if [ "${{ matrix.short }}" = "arm64" ]; then
            echo "arm64=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT
          fi


  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine event type and set tags
        id: event
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "is_tag=true" >> $GITHUB_OUTPUT
            echo "is_branch=false" >> $GITHUB_OUTPUT
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            {
              echo "tag_list<<EOF"
              echo "type=raw,value=$VERSION"
              echo "type=sha"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
            echo "is_branch=true" >> $GITHUB_OUTPUT
            {
              echo "tag_list<<EOF"
              echo "type=raw,value=latest"
              echo "type=sha"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}
          tags: ${{ steps.event.outputs.tag_list }}

      - name: Create manifest list and push
        run: |
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            ${{ needs.build.outputs.digest-amd64 }} \
            ${{ needs.build.outputs.digest-arm64 }}

      - name: Summary
        run: |
          echo "## Docker build completed :green_circle:" >> $GITHUB_STEP_SUMMARY
          echo "### Tags" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r TAG; do
            echo "- $TAG" >> $GITHUB_STEP_SUMMARY
          done
          echo "### Notes" >> $GITHUB_STEP_SUMMARY
