name: "[Nethermind] Taiko Client - Docker build and push"

on:
  workflow_dispatch:
  push:
    branches: [main]
    tags:
      - "taiko-client-v*"
    paths:
      - "packages/taiko-client/**"

env:
  DOCKER_REGISTRY: nethermind.jfrog.io
  DOCKER_USERNAME: modular
  DOCKER_REPOSITORY_DEV: modular-oci-local-dev/taiko-client
  DOCKER_REPOSITORY_STAGING: modular-oci-local-staging/taiko-client

jobs:
  build-amd64:
    name: Build AMD64 image
    runs-on: ubuntu-latest
    if: github.repository == 'NethermindEth/surge-taiko-mono'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_MODULAR_TOKEN_DEVELOPER }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=sha

      - name: Build and push AMD64 image
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
          docker buildx build --file packages/taiko-client/Dockerfile \
            --platform linux/amd64 \
            --provenance=false \
            --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${BRANCH_NAME}-amd64 \
            --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:latest-amd64 \
            --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${GITHUB_SHA}-amd64 \
            --push .

  build-arm64:
    name: Build ARM64 image
    runs-on: ubuntu-24.04-arm
    if: github.repository == 'NethermindEth/surge-taiko-mono'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_MODULAR_TOKEN_DEVELOPER }}
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=sha      

      - name: Build and push ARM64 image
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
          docker buildx build --file packages/taiko-client/Dockerfile \
            --platform linux/arm64 \
            --provenance=false \
            --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${BRANCH_NAME}-arm64 \
            --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:latest-arm64 \
            --tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${GITHUB_SHA}-arm64 \
            --push .

  merge-manifests:
    name: Merge and promote images
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_MODULAR_TOKEN_DEVELOPER }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and push multi-arch manifests
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
          
          # Create manifests using buildx
          docker buildx imagetools create --prefer-index=false -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${BRANCH_NAME} \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${BRANCH_NAME}-amd64 \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${BRANCH_NAME}-arm64
          
          docker buildx imagetools create --prefer-index=false -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:latest \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:latest-amd64 \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:latest-arm64
          
          docker buildx imagetools create --prefer-index=false -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${GITHUB_SHA} \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${GITHUB_SHA}-amd64 \
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY_DEV }}:${GITHUB_SHA}-arm64

      - uses: oras-project/setup-oras@v1
      - run: oras version
      - name: Login to registry with oras
        run: |
          oras login ${{ env.DOCKER_REGISTRY }} \
            -u ${{ env.DOCKER_USERNAME }} \
            -p ${{ secrets.ARTIFACTORY_MODULAR_TOKEN_DEVELOPER }}

      - name: Promote to Staging
        run: |
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r tag; do
            # Trim any whitespace from the tag
            tag=$(echo "$tag" | xargs)
            if [ -n "$tag" ]; then
              # Extract the tag suffix (everything after the last colon)
              tag_suffix="${tag##*:}"
      
              # Construct source and destination tags
              source_image="${DOCKER_REGISTRY}/${DOCKER_REPOSITORY_DEV}:${tag_suffix}"
              staging_image="${DOCKER_REGISTRY}/${DOCKER_REPOSITORY_STAGING}:${tag_suffix}"
      
              echo "Promoting ${source_image} to ${staging_image}"
              oras cp -r "${source_image}" "${staging_image}"
            else
              echo "Skipping empty tag"
            fi
          done

      - name: Summary
        run: |
          echo "## Docker build completed :green_circle:" >> $GITHUB_STEP_SUMMARY
          echo "### Tags" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | while IFS= read -r TAG; do
            echo "- $TAG" >> $GITHUB_STEP_SUMMARY
          done
          echo "### Notes" >> $GITHUB_STEP_SUMMARY
          echo "- The images have also been pushed to ${DOCKER_REPOSITORY_STAGING} repo" >> $GITHUB_STEP_SUMMARY
